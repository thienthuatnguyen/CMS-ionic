{"version":3,"file":"security.js","sources":["../../tmp/module/config.ts","../../tmp/module/service/storage.service.ts","../../tmp/module/service/security.abstract.service.ts","../../tmp/module/service/security.service.ts","../../tmp/module/service/security.interceptor.ts","../../tmp/module/model/tenant.ts","../../tmp/module/model/user.ts","../../tmp/module/lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable()\nexport class IvtSecurityConfig {\n    public apiUrl = '';\n    public rememberLogin = false;\n    public onUnAuthorized(response: HttpErrorResponse) {\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IvtStorageService {\n    save(key: string, val: any) {\n        if (val !== null && typeof val === 'object') {\n            localStorage.setItem(key + '_type', 'object');\n            val = JSON.stringify(val);\n        }\n        localStorage.setItem(key, val);\n    }\n    get(key: string) {\n        const val = localStorage.getItem(key) || sessionStorage.getItem(key);\n        const valType = localStorage.getItem(key + '_type') || sessionStorage.getItem(key + '_type');\n        if (valType === 'object') {\n            return JSON.parse(val);\n        } else if (val === 'null') {\n            return null;\n        } else {\n            return val;\n        }\n    }\n\n    remove(key: string) {\n        localStorage.removeItem(key);\n        localStorage.removeItem(key + '_type');\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { IvtStorageService } from './storage.service';\nimport { Observable } from 'rxjs/Observable';\nimport { IvtSecurityConfig } from '../config';\nimport { APIResponse, APICode } from '@ivt/http-client';\nimport 'rxjs/add/operator/map';\nimport { UserIf } from '../model/user.interface';\n\nexport class IvtSecurityAbstractService<T extends UserIf> {\n\n    user: T;\n    constructor(protected http: HttpClient, protected db: IvtStorageService, protected config: IvtSecurityConfig) {\n        this.loadUserCredentials();\n    }\n\n    protected loadUserCredentials() {\n        this.useCredentials(this.db.get('user'));\n    }\n\n    protected useCredentials(user: T) {\n        if (user) {\n            this.user = user;\n        }\n    }\n    protected destroyUserCredentials() {\n        this.db.remove('user');\n        this.user = null;\n    }\n\n    protected storeUserCredentials(user: T) {\n        if (this.config.rememberLogin === true) {\n            this.db.save('user', user);\n        }\n        this.useCredentials(user);\n    }\n    protected afterLogin(res: APIResponse) {\n        if (res.code === APICode.Success) {\n            this.storeUserCredentials(res.data);\n        }\n    }\n    login(loginModel: any): Observable<APIResponse> {\n        return this.http.post(this.config.apiUrl, loginModel, { params: { auth: 'false' } })\n            .map(res => {\n                const response = <APIResponse>(res);\n                this.afterLogin(response);\n                return response;\n            })\n    }\n\n    logout() {\n        // TODO\n        this.destroyUserCredentials();\n    }\n    getUser(): T {\n        return this.user;\n    }\n\n    isAuthenticated() {\n        return this.user && this.user.token;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../model/user';\nimport { HttpClient } from '@angular/common/http';\nimport { IvtStorageService } from './storage.service';\nimport { Observable } from 'rxjs/Observable';\nimport { IvtSecurityConfig } from '../config';\nimport { APIResponse, APICode } from '@ivt/http-client';\nimport 'rxjs/add/operator/map';\nimport { IvtSecurityAbstractService } from './security.abstract.service';\n\n@Injectable()\nexport class IvtSecurityService extends IvtSecurityAbstractService<User> {\n\n  constructor(public http: HttpClient, public db: IvtStorageService, public config: IvtSecurityConfig) {\n    super(http, db, config);\n  }\n\n}\n","import { Observable } from 'rxjs/Observable';\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpSentEvent, HttpHeaderResponse, HttpProgressEvent,\n    HttpResponse, HttpUserEvent, HttpErrorResponse\n} from '@angular/common/http';\n\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { IvtSecurityConfig } from '../config';\n\n@Injectable()\nexport class IvtSecurityInterceptor implements HttpInterceptor {\n\n    constructor(protected config: IvtSecurityConfig) {\n    }\n    intercept(req: HttpRequest<any>, next: HttpHandler):\n        Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n        return next.handle(req).pipe(catchError(err => {\n            if (err instanceof HttpErrorResponse) {\n                if (err.status === 401) {\n                    this.config.onUnAuthorized(err);\n                }\n            }\n            return Observable.throw(err);\n        }));\n    }\n\n}\n","export class Tenant {\n    id: string;\n    name: string;\n    logoID: string;\n    termsAndConditions: string;\n    privacyPolicy: string;\n}\n","import { Tenant } from './tenant';\nimport { UserIf } from './user.interface';\n\nexport class User implements UserIf {\n    id: number;\n    username: string;\n    password: string;\n    token: string;\n    name: string;\n    surname: string;\n    email: string;\n    pictureID: string;\n    tenant: Tenant;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { IvtHttpClientModule } from '@ivt/http-client';\nimport { IvtSecurityConfig } from './config';\nimport { IvtSecurityService } from './service/security.service';\nimport { IvtStorageService } from './service/storage.service';\nimport { Tenant } from './model/tenant';\nimport { User } from './model/user';\nimport { IvtSecurityAbstractService } from './service/security.abstract.service';\nimport { UserIf } from './model/user.interface';\nimport { IvtSecurityInterceptor } from './service/security.interceptor';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\n// Export module's public API\nexport { IvtSecurityConfig } from './config';\nexport { IvtSecurityService } from './service/security.service';\nexport { IvtStorageService } from './service/storage.service';\nexport { Tenant } from './model/tenant';\nexport { User } from './model/user';\nexport { UserIf } from './model/user.interface';\nexport { IvtSecurityAbstractService } from './service/security.abstract.service';\nexport { IvtSecurityInterceptor } from './service/security.interceptor';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IvtHttpClientModule\n  ],\n  exports: [],\n  declarations: []\n})\nexport class IvtSecurityModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: IvtSecurityModule,\n      providers: [\n        IvtSecurityConfig,\n        IvtSecurityService,\n        IvtStorageService,\n        { provide: HTTP_INTERCEPTORS, useClass: IvtSecurityInterceptor, multi: true }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;sBAKoB,EAAE;6BACK,KAAK;;;;;;IACrB,cAAc,CAAC,QAA2B;;;;YAJpD,UAAU;;;;;;;ACHX;;;;;;IAII,IAAI,CAAC,GAAW,EAAE,GAAQ;QACtB,IAAI,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YACzC,YAAY,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC9C,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SAC7B;QACD,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAClC;;;;;IACD,GAAG,CAAC,GAAW;QACX,uBAAM,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACrE,uBAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;QAC7F,IAAI,OAAO,KAAK,QAAQ,EAAE;YACtB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC1B;aAAM,IAAI,GAAG,KAAK,MAAM,EAAE;YACvB,OAAO,IAAI,CAAC;SACf;aAAM;YACH,OAAO,GAAG,CAAC;SACd;KACJ;;;;;IAED,MAAM,CAAC,GAAW;QACd,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC7B,YAAY,CAAC,UAAU,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;KAC1C;;;YAxBJ,UAAU;;;;;;;ACEX;;;;AAIA;;;;;;IAGI,YAAsB,IAAgB,EAAY,EAAqB,EAAY,MAAyB;QAAtF,SAAI,GAAJ,IAAI,CAAY;QAAY,OAAE,GAAF,EAAE,CAAmB;QAAY,WAAM,GAAN,MAAM,CAAmB;QACxG,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC9B;;;;IAES,mBAAmB;QACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;KAC5C;;;;;IAES,cAAc,CAAC,IAAO;QAC5B,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACpB;KACJ;;;;IACS,sBAAsB;QAC5B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;;;;;IAES,oBAAoB,CAAC,IAAO;QAClC,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,IAAI,EAAE;YACpC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAC9B;QACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KAC7B;;;;;IACS,UAAU,CAAC,GAAgB;QACjC,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,CAAC,OAAO,EAAE;YAC9B,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACvC;KACJ;;;;;IACD,KAAK,CAAC,UAAe;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC;aAC/E,GAAG,CAAC,GAAG;YACJ,uBAAM,QAAQ,sBAAiB,GAAG,EAAC,CAAC;YACpC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC1B,OAAO,QAAQ,CAAC;SACnB,CAAC,CAAA;KACT;;;;IAED,MAAM;;QAEF,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACjC;;;;IACD,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;;;;IAED,eAAe;QACX,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;KACvC;CAEJ;;;;;;AC7DD,wBAWgC,SAAQ,0BAAgC;;;;;;IAEtE,YAAmB,IAAgB,EAAS,EAAqB,EAAS,MAAyB;QACjG,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;QADP,SAAI,GAAJ,IAAI,CAAY;QAAS,OAAE,GAAF,EAAE,CAAmB;QAAS,WAAM,GAAN,MAAM,CAAmB;KAElG;;;YALF,UAAU;;;;YARF,UAAU;YACV,iBAAiB;YAEjB,iBAAiB;;;;;;;ACL1B;;;;IAcI,YAAsB,MAAyB;QAAzB,WAAM,GAAN,MAAM,CAAmB;KAC9C;;;;;;IACD,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAE9C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG;YACvC,IAAI,GAAG,YAAY,iBAAiB,EAAE;gBAClC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;oBACpB,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;iBACnC;aACJ;YACD,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAChC,CAAC,CAAC,CAAC;KACP;;;YAfJ,UAAU;;;;YAFF,iBAAiB;;;;;;;ACT1B;CAMC;;;;;;ACHD;CAUC;;;;;;ACbD;;;;IAgCE,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE;gBACT,iBAAiB;gBACjB,kBAAkB;gBAClB,iBAAiB;gBACjB,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,KAAK,EAAE,IAAI,EAAE;aAC9E;SACF,CAAC;KACH;;;YAnBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,mBAAmB;iBACpB;gBACD,OAAO,EAAE,EAAE;gBACX,YAAY,EAAE,EAAE;aACjB;;;;;;;;;;;;;;;"}