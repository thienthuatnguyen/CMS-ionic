import { Injectable, NgModule } from '@angular/core';
import { APICode, IvtHttpClientModule } from '@ivt/http-client';
import 'rxjs/add/operator/map';
import { HttpClient, HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { catchError } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IvtSecurityConfig {
    constructor() {
        this.apiUrl = '';
        this.rememberLogin = false;
    }
    /**
     * @param {?} response
     * @return {?}
     */
    onUnAuthorized(response) {
    }
}
IvtSecurityConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IvtStorageService {
    /**
     * @param {?} key
     * @param {?} val
     * @return {?}
     */
    save(key, val) {
        if (val !== null && typeof val === 'object') {
            localStorage.setItem(key + '_type', 'object');
            val = JSON.stringify(val);
        }
        localStorage.setItem(key, val);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        const /** @type {?} */ val = localStorage.getItem(key) || sessionStorage.getItem(key);
        const /** @type {?} */ valType = localStorage.getItem(key + '_type') || sessionStorage.getItem(key + '_type');
        if (valType === 'object') {
            return JSON.parse(val);
        }
        else if (val === 'null') {
            return null;
        }
        else {
            return val;
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        localStorage.removeItem(key);
        localStorage.removeItem(key + '_type');
    }
}
IvtStorageService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 * @template T
 */
class IvtSecurityAbstractService {
    /**
     * @param {?} http
     * @param {?} db
     * @param {?} config
     */
    constructor(http, db, config) {
        this.http = http;
        this.db = db;
        this.config = config;
        this.loadUserCredentials();
    }
    /**
     * @return {?}
     */
    loadUserCredentials() {
        this.useCredentials(this.db.get('user'));
    }
    /**
     * @param {?} user
     * @return {?}
     */
    useCredentials(user) {
        if (user) {
            this.user = user;
        }
    }
    /**
     * @return {?}
     */
    destroyUserCredentials() {
        this.db.remove('user');
        this.user = null;
    }
    /**
     * @param {?} user
     * @return {?}
     */
    storeUserCredentials(user) {
        if (this.config.rememberLogin === true) {
            this.db.save('user', user);
        }
        this.useCredentials(user);
    }
    /**
     * @param {?} res
     * @return {?}
     */
    afterLogin(res) {
        if (res.code === APICode.Success) {
            this.storeUserCredentials(res.data);
        }
    }
    /**
     * @param {?} loginModel
     * @return {?}
     */
    login(loginModel) {
        return this.http.post(this.config.apiUrl, loginModel, { params: { auth: 'false' } })
            .map(res => {
            const /** @type {?} */ response = /** @type {?} */ ((res));
            this.afterLogin(response);
            return response;
        });
    }
    /**
     * @return {?}
     */
    logout() {
        // TODO
        this.destroyUserCredentials();
    }
    /**
     * @return {?}
     */
    getUser() {
        return this.user;
    }
    /**
     * @return {?}
     */
    isAuthenticated() {
        return this.user && this.user.token;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IvtSecurityService extends IvtSecurityAbstractService {
    /**
     * @param {?} http
     * @param {?} db
     * @param {?} config
     */
    constructor(http, db, config) {
        super(http, db, config);
        this.http = http;
        this.db = db;
        this.config = config;
    }
}
IvtSecurityService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IvtSecurityService.ctorParameters = () => [
    { type: HttpClient, },
    { type: IvtStorageService, },
    { type: IvtSecurityConfig, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IvtSecurityInterceptor {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        return next.handle(req).pipe(catchError(err => {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 401) {
                    this.config.onUnAuthorized(err);
                }
            }
            return Observable.throw(err);
        }));
    }
}
IvtSecurityInterceptor.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IvtSecurityInterceptor.ctorParameters = () => [
    { type: IvtSecurityConfig, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Tenant {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class User {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IvtSecurityModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: IvtSecurityModule,
            providers: [
                IvtSecurityConfig,
                IvtSecurityService,
                IvtStorageService,
                { provide: HTTP_INTERCEPTORS, useClass: IvtSecurityInterceptor, multi: true }
            ]
        };
    }
}
IvtSecurityModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    IvtHttpClientModule
                ],
                exports: [],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { IvtSecurityConfig, IvtSecurityService, IvtStorageService, Tenant, User, IvtSecurityAbstractService, IvtSecurityInterceptor, IvtSecurityModule };
//# sourceMappingURL=security.js.map
