{"version":3,"file":"security.umd.min.js","sources":["../../tmp/module/config.ts","../../tmp/module/service/storage.service.ts","../../tmp/module/service/security.abstract.service.ts","../../tmp/module/service/security.service.ts","../../tmp/module/service/security.interceptor.ts","../../tmp/module/model/tenant.ts","../../tmp/module/model/user.ts","../../tmp/module/lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable()\nexport class IvtSecurityConfig {\n    public apiUrl = '';\n    public rememberLogin = false;\n    public onUnAuthorized(response: HttpErrorResponse) {\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IvtStorageService {\n    save(key: string, val: any) {\n        if (val !== null && typeof val === 'object') {\n            localStorage.setItem(key + '_type', 'object');\n            val = JSON.stringify(val);\n        }\n        localStorage.setItem(key, val);\n    }\n    get(key: string) {\n        const val = localStorage.getItem(key) || sessionStorage.getItem(key);\n        const valType = localStorage.getItem(key + '_type') || sessionStorage.getItem(key + '_type');\n        if (valType === 'object') {\n            return JSON.parse(val);\n        } else if (val === 'null') {\n            return null;\n        } else {\n            return val;\n        }\n    }\n\n    remove(key: string) {\n        localStorage.removeItem(key);\n        localStorage.removeItem(key + '_type');\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { IvtStorageService } from './storage.service';\nimport { Observable } from 'rxjs/Observable';\nimport { IvtSecurityConfig } from '../config';\nimport { APIResponse, APICode } from '@ivt/http-client';\nimport 'rxjs/add/operator/map';\nimport { UserIf } from '../model/user.interface';\n\nexport class IvtSecurityAbstractService<T extends UserIf> {\n\n    user: T;\n    constructor(protected http: HttpClient, protected db: IvtStorageService, protected config: IvtSecurityConfig) {\n        this.loadUserCredentials();\n    }\n\n    protected loadUserCredentials() {\n        this.useCredentials(this.db.get('user'));\n    }\n\n    protected useCredentials(user: T) {\n        if (user) {\n            this.user = user;\n        }\n    }\n    protected destroyUserCredentials() {\n        this.db.remove('user');\n        this.user = null;\n    }\n\n    protected storeUserCredentials(user: T) {\n        if (this.config.rememberLogin === true) {\n            this.db.save('user', user);\n        }\n        this.useCredentials(user);\n    }\n    protected afterLogin(res: APIResponse) {\n        if (res.code === APICode.Success) {\n            this.storeUserCredentials(res.data);\n        }\n    }\n    login(loginModel: any): Observable<APIResponse> {\n        return this.http.post(this.config.apiUrl, loginModel, { params: { auth: 'false' } })\n            .map(res => {\n                const response = <APIResponse>(res);\n                this.afterLogin(response);\n                return response;\n            })\n    }\n\n    logout() {\n        // TODO\n        this.destroyUserCredentials();\n    }\n    getUser(): T {\n        return this.user;\n    }\n\n    isAuthenticated() {\n        return this.user && this.user.token;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../model/user';\nimport { HttpClient } from '@angular/common/http';\nimport { IvtStorageService } from './storage.service';\nimport { Observable } from 'rxjs/Observable';\nimport { IvtSecurityConfig } from '../config';\nimport { APIResponse, APICode } from '@ivt/http-client';\nimport 'rxjs/add/operator/map';\nimport { IvtSecurityAbstractService } from './security.abstract.service';\n\n@Injectable()\nexport class IvtSecurityService extends IvtSecurityAbstractService<User> {\n\n  constructor(public http: HttpClient, public db: IvtStorageService, public config: IvtSecurityConfig) {\n    super(http, db, config);\n  }\n\n}\n","import { Observable } from 'rxjs/Observable';\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpSentEvent, HttpHeaderResponse, HttpProgressEvent,\n    HttpResponse, HttpUserEvent, HttpErrorResponse\n} from '@angular/common/http';\n\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { IvtSecurityConfig } from '../config';\n\n@Injectable()\nexport class IvtSecurityInterceptor implements HttpInterceptor {\n\n    constructor(protected config: IvtSecurityConfig) {\n    }\n    intercept(req: HttpRequest<any>, next: HttpHandler):\n        Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n        return next.handle(req).pipe(catchError(err => {\n            if (err instanceof HttpErrorResponse) {\n                if (err.status === 401) {\n                    this.config.onUnAuthorized(err);\n                }\n            }\n            return Observable.throw(err);\n        }));\n    }\n\n}\n","export class Tenant {\n    id: string;\n    name: string;\n    logoID: string;\n    termsAndConditions: string;\n    privacyPolicy: string;\n}\n","import { Tenant } from './tenant';\nimport { UserIf } from './user.interface';\n\nexport class User implements UserIf {\n    id: number;\n    username: string;\n    password: string;\n    token: string;\n    name: string;\n    surname: string;\n    email: string;\n    pictureID: string;\n    tenant: Tenant;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { IvtHttpClientModule } from '@ivt/http-client';\nimport { IvtSecurityConfig } from './config';\nimport { IvtSecurityService } from './service/security.service';\nimport { IvtStorageService } from './service/storage.service';\nimport { Tenant } from './model/tenant';\nimport { User } from './model/user';\nimport { IvtSecurityAbstractService } from './service/security.abstract.service';\nimport { UserIf } from './model/user.interface';\nimport { IvtSecurityInterceptor } from './service/security.interceptor';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\n// Export module's public API\nexport { IvtSecurityConfig } from './config';\nexport { IvtSecurityService } from './service/security.service';\nexport { IvtStorageService } from './service/storage.service';\nexport { Tenant } from './model/tenant';\nexport { User } from './model/user';\nexport { UserIf } from './model/user.interface';\nexport { IvtSecurityAbstractService } from './service/security.abstract.service';\nexport { IvtSecurityInterceptor } from './service/security.interceptor';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IvtHttpClientModule\n  ],\n  exports: [],\n  declarations: []\n})\nexport class IvtSecurityModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: IvtSecurityModule,\n      providers: [\n        IvtSecurityConfig,\n        IvtSecurityService,\n        IvtStorageService,\n        { provide: HTTP_INTERCEPTORS, useClass: IvtSecurityInterceptor, multi: true }\n      ]\n    };\n  }\n}\n"],"names":["IvtSecurityConfig","response","Injectable","IvtStorageService","key","val","localStorage","setItem","JSON","stringify","getItem","sessionStorage","parse","removeItem","IvtSecurityAbstractService","http","db","config","this","loadUserCredentials","useCredentials","get","user","remove","rememberLogin","save","res","code","APICode","Success","storeUserCredentials","data","loginModel","post","apiUrl","params","auth","map","_this","afterLogin","destroyUserCredentials","token","_super","__extends","HttpClient","IvtSecurityInterceptor","req","next","handle","pipe","catchError","err","HttpErrorResponse","status","onUnAuthorized","Observable","throw","Tenant","User","IvtSecurityModule","ngModule","providers","IvtSecurityService","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","CommonModule","IvtHttpClientModule","exports","declarations"],"mappings":"unBAAA,4CAKoB,uBACO,SAChBA,oCAAeC,yBAJzBC,sDCCGC,iBAAA,SAAKC,EAAaC,GACF,OAARA,GAA+B,iBAARA,IACvBC,aAAaC,QAAQH,EAAM,QAAS,UACpCC,EAAMG,KAAKC,UAAUJ,IAEzBC,aAAaC,QAAQH,EAAKC,IAE9BF,gBAAA,SAAIC,GACA,IAAMC,EAAMC,aAAaI,QAAQN,IAAQO,eAAeD,QAAQN,GAEhE,MAAgB,YADAE,aAAaI,QAAQN,EAAM,UAAYO,eAAeD,QAAQN,EAAM,UAEzEI,KAAKI,MAAMP,GACH,SAARA,EACA,KAEAA,GAIfF,mBAAA,SAAOC,GACHE,aAAaO,WAAWT,GACxBE,aAAaO,WAAWT,EAAM,8BAvBrCF,oBCMDY,aAGI,WAAsBC,EAA4BC,EAAiCC,GAA7DC,UAAAH,EAA4BG,QAAAF,EAAiCE,YAAAD,EAC/EC,KAAKC,6BAGCL,gCAAV,WACII,KAAKE,eAAeF,KAAKF,GAAGK,IAAI,UAG1BP,2BAAV,SAAyBQ,GACjBA,IACAJ,KAAKI,KAAOA,IAGVR,mCAAV,WACII,KAAKF,GAAGO,OAAO,QACfL,KAAKI,KAAO,MAGNR,iCAAV,SAA+BQ,IACO,IAA9BJ,KAAKD,OAAOO,eACZN,KAAKF,GAAGS,KAAK,OAAQH,GAEzBJ,KAAKE,eAAeE,IAEdR,uBAAV,SAAqBY,GACbA,EAAIC,OAASC,UAAQC,SACrBX,KAAKY,qBAAqBJ,EAAIK,OAGtCjB,kBAAA,SAAMkB,GAAN,WACI,OAAOd,KAAKH,KAAKkB,KAAKf,KAAKD,OAAOiB,OAAQF,GAAcG,QAAUC,KAAM,WACnEC,IAAI,SAAAX,GACD,IAAMzB,IAEN,OADAqC,EAAKC,WAAWtC,GACTA,KAInBa,mBAAA,WAEII,KAAKsB,0BAET1B,oBAAA,WACI,OAAOI,KAAKI,MAGhBR,4BAAA,WACI,OAAOI,KAAKI,MAAQJ,KAAKI,KAAKmB,gTC7CpC,WAAmB1B,EAAyBC,EAA8BC,GAA1E,MACEyB,YAAM3B,EAAMC,EAAIC,gBADCqB,OAAAvB,EAAyBuB,KAAAtB,EAA8BsB,SAAArB,WAFpC0B,2BADvCzC,wDARQ0C,oBACAzC,SAEAH,QAM+Bc,gBCGpC,WAAsBG,GAAAC,YAAAD,SAEtB4B,sBAAA,SAAUC,EAAuBC,GAAjC,WAEI,OAAOA,EAAKC,OAAOF,GAAKG,KAAKC,aAAW,SAAAC,GAMpC,OALIA,aAAeC,qBACI,MAAfD,EAAIE,QACJf,EAAKrB,OAAOqC,eAAeH,GAG5BI,aAAWC,MAAML,2BAbnCjD,wDAFQF,UCTTyD,oCCGAC,sEC6BSC,UAAP,WACE,OACEC,SAAUD,EACVE,WACE7D,EACA8D,EACA3D,GACE4D,QAASC,oBAAmBC,SAAUpB,EAAwBqB,OAAO,0BAhB9EC,kBACCC,SACEC,eACAC,uBAEFC,WACAC"}