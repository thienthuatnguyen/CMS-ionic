import { Injectable, NgModule } from '@angular/core';
import { HttpResponse, HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { plainToClass } from 'class-transformer';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var IvtHttpClientConfig = /** @class */ (function () {
    function IvtHttpClientConfig() {
    }
    /**
     *
     * @param request
     * Transform request before invoking API
     */
    /**
     *
     * @param {?} request
     * Transform request before invoking API
     * @return {?}
     */
    IvtHttpClientConfig.prototype.transformRequestBody = /**
     *
     * @param {?} request
     * Transform request before invoking API
     * @return {?}
     */
    function (request) {
        return null;
    };
    /**
     *
     * @param response
     * Transform response from API
     */
    /**
     *
     * @param {?} response
     * Transform response from API
     * @return {?}
     */
    IvtHttpClientConfig.prototype.transformResponseBody = /**
     *
     * @param {?} response
     * Transform response from API
     * @return {?}
     */
    function (response) {
        return null;
    };
    /**
     * Provide Authorization Header
     */
    /**
     * Provide Authorization Header
     * @return {?}
     */
    IvtHttpClientConfig.prototype.getAuthorizationHeader = /**
     * Provide Authorization Header
     * @return {?}
     */
    function () {
        throw new Error('Not Implemented');
    };
    IvtHttpClientConfig.decorators = [
        { type: Injectable },
    ];
    return IvtHttpClientConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var IvtHttpInterceptor = /** @class */ (function () {
    function IvtHttpInterceptor(config) {
        this.config = config;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    IvtHttpInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        var /** @type {?} */ clonedReq = null;
        if (req.params.get('auth') !== 'false') {
            clonedReq = clonedReq || {};
            clonedReq.headers = req.headers.set('Authorization', this.config.getAuthorizationHeader());
        }
        if (req.method === 'POST') {
            var /** @type {?} */ transformedBody = this.config.transformRequestBody(req);
            if (transformedBody != null) {
                clonedReq = clonedReq || {};
                clonedReq.body = transformedBody;
            }
            else {
                console.log('[IvtHttpInterceptor] transformRequest() is null, request body is not transformed');
            }
        }
        if (clonedReq != null) {
            req = req.clone(clonedReq);
        }
        return next.handle(req).pipe(map(function (response) {
            if (response instanceof HttpResponse) {
                var /** @type {?} */ transformedBody = _this.config.transformResponseBody(response);
                if (transformedBody != null) {
                    response = response.clone({
                        body: transformedBody
                    });
                }
                else {
                    console.log('[IvtHttpInterceptor] transformResponse() is null, response body is not transformed');
                }
            }
            return response;
        }));
    };
    IvtHttpInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    IvtHttpInterceptor.ctorParameters = function () { return [
        { type: IvtHttpClientConfig, },
    ]; };
    return IvtHttpInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var APICode = /** @class */ (function () {
    function APICode() {
    }
    APICode.ClientError = 'ClientError';
    APICode.Progress = 'Progress';
    APICode.Success = '1';
    APICode.TokenInvalid = '401';
    APICode.ParameterMissing = '-400';
    APICode.InternalServerError = '-500';
    APICode.FailedToCreateAppointment = '-510';
    APICode.NoAppointmentFound = '-511';
    APICode.FailedToCreateRepairOrder = '-600';
    APICode.FailedToCreateRepairOrderDueToOpenRepairOrderAlreadyExist = '-601';
    APICode.FailedToUpdateRepairOrder = '-620';
    APICode.CannotIssueRODueToAlreadyIssued = '-630';
    APICode.CannotCompleteServiceDueToAlreadyCompleted = '-640';
    APICode.FailedToCompleteService = -641;
    APICode.CannotCancelRepairOrderDueToAlreadyCanceled = '-642';
    APICode.CannotCancelRepairOrderDueToAlreadyCompleted = '-643';
    APICode.CannotCheckInDueToNonAppointment = '-644';
    APICode.CannotIssueDueToNonPreRO = '-650';
    APICode.NotAllowedFileFormat = '-730';
    APICode.NoChecklistFound = '-900';
    APICode.FailedToSaveChecklist = '-901';
    APICode.FailedToSendMessage = '-1000';
    APICode.FailedToCreateScheduleItem = '-1100';
    APICode.OrganizationNotFound = '-1200';
    APICode.UserNotFound = '-1201';
    APICode.QLTokenWrong = '-1202';
    APICode.QLTokenExpired = '-1203';
    APICode.DealerPushServerSettingMissing = '-1204';
    APICode.Undefined = '-99999';
    APICode.Timeout = '-90000';
    APICode.CannotConnectToServer = '-90001';
    APICode.KickedOut = 'HOST_COMMON_6000';
    return APICode;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ErrorLevel = /** @class */ (function () {
    function ErrorLevel() {
    }
    ErrorLevel.Critical = 'critical';
    ErrorLevel.Normal = 'normal';
    return ErrorLevel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var APIResponse = /** @class */ (function () {
    function APIResponse() {
    }
    return APIResponse;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
IvtHttpService = /** @class */ (function () {
    function IvtHttpService(httpClient, url, ClazzType, config) {
        this.httpClient = httpClient;
        this.url = url;
        this.ClazzType = ClazzType;
        this.config = config;
    }
    /**
     * @param {?} res
     * @return {?}
     */
    IvtHttpService.prototype.extractData = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        var /** @type {?} */ response = /** @type {?} */ ((res));
        if (response.code === APICode.Success) {
            if (response.data instanceof Array) {
                return plainToClass(this.ClazzType, response.data);
            }
            else {
                return plainToClass(this.ClazzType, response.data);
            }
        }
        throw response;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    IvtHttpService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var /** @type {?} */ response = new APIResponse();
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            console.error('[ServicesBase]: An error occurred:', error.error.message);
            response.code = APICode.ClientError;
            response.message = error.error.message;
        }
        else if (error instanceof APIResponse) {
            return Observable.throw(error);
        }
        else if (error instanceof Error) {
            response.code = APICode.ClientError;
            response.message = error.message;
        }
        else if (error.error instanceof ProgressEvent) {
            response.code = APICode.Progress;
            response.event = error.error;
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            var /** @type {?} */ transformedResponse = this.config.transformResponseBody(error);
            if (transformedResponse) {
                response = transformedResponse;
            }
            else {
                // transformResponse is not implemented
                response = error.error;
            }
            response.code = error.status.toString();
            console.error("[ServicesBase]: Backend returned code " + response.code + ", " +
                ("body was: " + response.message));
        }
        return Observable.throw(response);
    };
    /**
     * @param {?=} parentId
     * @return {?}
     */
    IvtHttpService.prototype.getAll = /**
     * @param {?=} parentId
     * @return {?}
     */
    function (parentId) {
        var _this = this;
        return this.httpClient.get(this.url + (parentId ? "/" + parentId : ''))
            .pipe(map(function (res) { return _this.extractData(res); }))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IvtHttpService.prototype.get = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.httpClient.get(this.url + (id ? "/" + id : ''))
            .pipe(map(function (res) { return _this.extractData(res); }))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    // create or update
    /**
     * @param {?} item
     * @return {?}
     */
    IvtHttpService.prototype.save = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        return this.httpClient.post(this.url, item)
            .pipe(map(function (res) { return _this.extractData(res); }))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?=} criteria
     * @return {?}
     */
    IvtHttpService.prototype.search = /**
     * @param {?=} criteria
     * @return {?}
     */
    function (criteria) {
        var _this = this;
        return this.httpClient.post(this.url, criteria)
            .pipe(map(function (res) { return _this.extractData(res); }))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IvtHttpService.prototype.delete = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.httpClient.delete(this.url + (id ? "/" + id : ''))
            .pipe(map(function (res) { return _this.extractData(res); }))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    return IvtHttpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var IvtHttpClientModule = /** @class */ (function () {
    function IvtHttpClientModule() {
    }
    /**
     * @return {?}
     */
    IvtHttpClientModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: IvtHttpClientModule,
            providers: [
                IvtHttpClientConfig,
                { provide: HTTP_INTERCEPTORS, useClass: IvtHttpInterceptor, multi: true }
            ]
        };
    };
    IvtHttpClientModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule
                    ]
                },] },
    ];
    return IvtHttpClientModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { APICode, ErrorLevel, APIResponse, IvtHttpInterceptor, IvtHttpClientConfig, IvtHttpService, IvtHttpClientModule };
//# sourceMappingURL=http-client.es5.js.map
