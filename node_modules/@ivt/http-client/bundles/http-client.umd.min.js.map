{"version":3,"file":"http-client.umd.min.js","sources":["../../tmp/module/config.ts","../../tmp/module/service/interceptor.ts","../../tmp/module/constant/api.code.ts","../../tmp/module/constant/error.level.ts","../../tmp/module/model/api.response.ts","../../tmp/module/service/base.service.ts","../../tmp/module/lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { APIResponse } from './model/api.response';\nimport { HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable()\nexport class IvtHttpClientConfig {\n\n    /**\n     *\n     * @param request\n     * Transform request before invoking API\n     */\n    transformRequestBody(request: HttpRequest<any>): any {\n        return null;\n    }\n    /**\n     *\n     * @param response\n     * Transform response from API\n     */\n    transformResponseBody(response: HttpResponse<any> | HttpErrorResponse): APIResponse {\n        return null;\n    }\n    /**\n     * Provide Authorization Header\n     */\n    getAuthorizationHeader(): string {\n        throw new Error('Not Implemented');\n    }\n}\n","import { Observable } from 'rxjs/Observable';\nimport {\n    HttpInterceptor, HttpRequest, HttpHandler,\n    HttpSentEvent, HttpHeaderResponse, HttpProgressEvent,\n    HttpResponse, HttpUserEvent\n} from '@angular/common/http';\n\nimport { Injectable } from '@angular/core';\nimport { IvtHttpClientConfig } from '../config';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class IvtHttpInterceptor implements HttpInterceptor {\n\n    constructor(private config: IvtHttpClientConfig) {\n    }\n    intercept(req: HttpRequest<any>, next: HttpHandler):\n        Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n        let clonedReq: any = null;\n        if (req.params.get('auth') !== 'false') {\n            clonedReq = clonedReq || {};\n            clonedReq.headers = req.headers.set('Authorization', this.config.getAuthorizationHeader());\n        }\n        if (req.method === 'POST') {\n            const transformedBody = this.config.transformRequestBody(req);\n            if (transformedBody != null) {\n                clonedReq = clonedReq || {};\n                clonedReq.body = transformedBody;\n            } else {\n                console.log('[IvtHttpInterceptor] transformRequest() is null, request body is not transformed');\n            }\n        }\n        if (clonedReq != null) {\n            req = req.clone(clonedReq);\n        }\n        return next.handle(req).pipe(map(response => {\n            if (response instanceof HttpResponse) {\n                const transformedBody = this.config.transformResponseBody(response);\n                if (transformedBody != null) {\n                    response = response.clone({\n                        body: transformedBody\n                    })\n                } else {\n                    console.log('[IvtHttpInterceptor] transformResponse() is null, response body is not transformed');\n                }\n            }\n            return response;\n        }))\n    }\n\n}\n","export class APICode {\n    static ClientError = 'ClientError';\n    static Progress = 'Progress';\n    static Success = '1';\n    static TokenInvalid = '401';\n    static ParameterMissing = '-400';\n    static InternalServerError = '-500';\n    static FailedToCreateAppointment = '-510';\n    static NoAppointmentFound = '-511';\n    static FailedToCreateRepairOrder = '-600';\n    static FailedToCreateRepairOrderDueToOpenRepairOrderAlreadyExist = '-601';\n    static FailedToUpdateRepairOrder = '-620';\n    static CannotIssueRODueToAlreadyIssued = '-630';\n    static CannotCompleteServiceDueToAlreadyCompleted = '-640';\n    static FailedToCompleteService = -641;\n    static CannotCancelRepairOrderDueToAlreadyCanceled = '-642';\n    static CannotCancelRepairOrderDueToAlreadyCompleted = '-643';\n    static CannotCheckInDueToNonAppointment = '-644';\n    static CannotIssueDueToNonPreRO = '-650';\n    static NotAllowedFileFormat = '-730';\n    static NoChecklistFound = '-900';\n    static FailedToSaveChecklist = '-901';\n    static FailedToSendMessage = '-1000';\n    static FailedToCreateScheduleItem = '-1100';\n    static OrganizationNotFound = '-1200';\n    static UserNotFound = '-1201';\n    static QLTokenWrong = '-1202';\n    static QLTokenExpired = '-1203';\n    static DealerPushServerSettingMissing = '-1204';\n    static Undefined = '-99999';\n    static Timeout = '-90000';\n    static CannotConnectToServer = '-90001';\n    static KickedOut = 'HOST_COMMON_6000'\n }\n","export class ErrorLevel {\n    static Critical = 'critical';\n    static Normal = 'normal';\n}\n","export class APIResponse {\n    /**\n     * APICode\n     */\n    public code: string;\n    public message: string;\n    public data: any;\n    public meta: any;\n    public event: Event;\n    public recommendedAction: string;\n    public ex: any;\n}\n\n","import { plainToClass } from 'class-transformer';\nimport { Observable } from 'rxjs/Observable';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport 'rxjs/add/observable/throw';\nimport { APIResponse } from '../model/api.response';\nimport { APICode } from '../constant/api.code';\nimport { IvtHttpClientConfig } from '../config';\n\nexport class IvtHttpService<T> {\n\n    constructor(\n        public httpClient: HttpClient,\n        protected url: string,\n        private ClazzType: Type<T>,\n        private config: IvtHttpClientConfig) {\n    }\n\n    public extractData(res: APIResponse): T | T[] {\n        const response = <APIResponse>(res);\n        if (response.code === APICode.Success) {\n            if (response.data instanceof Array) {\n                return plainToClass<T, T[]>(this.ClazzType, response.data);\n            } else {\n                return plainToClass<T, T>(this.ClazzType, response.data);\n            }\n        }\n        throw response;\n    }\n\n    protected handleError(error: HttpErrorResponse) {\n        let response = new APIResponse();\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred. Handle it accordingly.\n            console.error('[ServicesBase]: An error occurred:', error.error.message);\n            response.code = APICode.ClientError;\n            response.message = error.error.message;\n        } else if (error instanceof APIResponse) {\n            return Observable.throw(error);\n        } else if (error instanceof Error) {\n            response.code = APICode.ClientError;\n            response.message = error.message;\n        } else if (error.error instanceof ProgressEvent) {\n            response.code = APICode.Progress;\n            response.event = error.error;\n        } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            const transformedResponse = this.config.transformResponseBody(error);\n            if (transformedResponse) {\n                response = transformedResponse;\n            } else {\n                // transformResponse is not implemented\n                response = error.error;\n            }\n            response.code = error.status.toString();\n            console.error(\n                `[ServicesBase]: Backend returned code ${response.code}, ` +\n                `body was: ${response.message}`);\n        }\n        return Observable.throw(response);\n    };\n\n    getAll(parentId?: string): Observable<T[]> {\n        return this.httpClient.get<APIResponse>(this.url + (parentId ? `/${parentId}` : ''))\n            .pipe(map(res => this.extractData(res)))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n    get(id: string): Observable<T> {\n        return this.httpClient.get<APIResponse>(this.url + (id ? `/${id}` : ''))\n            .pipe(map(res => this.extractData(res)))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n    // create or update\n    save(item: any): Observable<T> {\n        return this.httpClient.post<APIResponse>(this.url, item)\n            .pipe(map(res => this.extractData(res)))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n    search(criteria?: any): Observable<T[]> {\n        return this.httpClient.post<APIResponse>(this.url, criteria)\n            .pipe(map(res => this.extractData(res)))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n    delete(id: string): Observable<any> {\n        return this.httpClient.delete<APIResponse>(this.url + (id ? `/${id}` : ''))\n            .pipe(map(res => this.extractData(res)))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n}\n\n// tslint:disable-next-line:interface-over-type-literal\nexport declare type Type<T> = {\n    new(...args: any[]): T;\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { IvtHttpInterceptor } from './service/interceptor';\nimport { IvtHttpClientConfig } from './config';\nimport { APICode } from './constant/api.code';\nimport { APIResponse } from './model/api.response';\nimport { ErrorLevel } from './constant/error.level';\nimport { IvtHttpService } from './service/base.service';\n// Export module's public API\n\nexport { APICode } from './constant/api.code';\nexport { ErrorLevel } from './constant/error.level';\nexport { APIResponse } from './model/api.response';\nexport { IvtHttpInterceptor } from './service/interceptor';\nexport { IvtHttpClientConfig } from './config';\nexport { IvtHttpService } from './service/base.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ]\n})\nexport class IvtHttpClientModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: IvtHttpClientModule,\n      providers: [\n        IvtHttpClientConfig,\n        { provide: HTTP_INTERCEPTORS, useClass: IvtHttpInterceptor, multi: true }\n      ]\n    };\n  }\n}\n"],"names":["IvtHttpClientConfig","request","response","Error","Injectable","config","this","IvtHttpInterceptor","req","next","clonedReq","params","get","headers","set","getAuthorizationHeader","method","transformedBody","transformRequestBody","body","console","log","clone","handle","pipe","map","HttpResponse","_this","transformResponseBody","APIResponse","IvtHttpService","httpClient","url","ClazzType","res","code","APICode","Success","data","Array","plainToClass","error","ErrorEvent","message","ClientError","Observable","throw","ProgressEvent","Progress","event","transformedResponse","status","toString","parentId","extractData","catchError","err","handleError","id","item","post","criteria","delete","IvtHttpClientModule","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","CommonModule","HttpClientModule"],"mappings":"wnBAAA,sCAYIA,iCAAA,SAAqBC,GACjB,OAAO,MAOXD,kCAAA,SAAsBE,GAClB,OAAO,MAKXF,mCAAA,WACI,MAAM,IAAIG,MAAM,wCAvBvBC,iCCUG,WAAoBC,GAAAC,YAAAD,SAEpBE,sBAAA,SAAUC,EAAuBC,GAAjC,WAEQC,EAAiB,KAKrB,GAJ+B,UAA3BF,EAAIG,OAAOC,IAAI,WACfF,EAAYA,OACFG,QAAUL,EAAIK,QAAQC,IAAI,gBAAiBR,KAAKD,OAAOU,2BAElD,SAAfP,EAAIQ,OAAmB,CACvB,IAAMC,EAAkBX,KAAKD,OAAOa,qBAAqBV,GAClC,MAAnBS,GACAP,EAAYA,OACFS,KAAOF,EAEjBG,QAAQC,IAAI,oFAMpB,OAHiB,MAAbX,IACAF,EAAMA,EAAIc,MAAMZ,IAEbD,EAAKc,OAAOf,GAAKgB,KAAKC,MAAI,SAAAvB,GAC7B,GAAIA,aAAoBwB,eAAc,CAClC,IAAMT,EAAkBU,EAAKtB,OAAOuB,sBAAsB1B,GACnC,MAAnBe,EACAf,EAAWA,EAASoB,OAChBH,KAAMF,IAGVG,QAAQC,IAAI,sFAGpB,OAAOnB,0BAnClBE,wDAHQJ,0DCPgB,yBACH,qBACD,mBACK,yBACI,6BACG,mCACM,4BACP,mCACO,mEACgC,mCAChC,yCACM,oDACW,kCAClB,kDACmB,sDACC,0CACZ,kCACR,8BACJ,0BACJ,+BACK,6BACF,qCACO,+BACN,uBACR,uBACA,yBACE,yCACgB,oBACrB,mBACF,iCACc,qBACZ,qEC/BD,oBACF,cCFpB6B,oCCUAC,aAEI,WACWC,EACGC,EACFC,EACA5B,GAHDC,gBAAAyB,EACGzB,SAAA0B,EACF1B,eAAA2B,EACA3B,YAAAD,SAGLyB,iCAAYI,GACf,IAAMhC,IACN,GAAIA,EAASiC,OAASC,EAAQC,QAC1B,OAAInC,EAASoC,KAAgBC,MAClBC,eAAqBlC,KAAK2B,UAAW/B,EAASoC,MAK7D,MAAMpC,GAGA4B,wBAAV,SAAsBW,GAClB,IAAIvC,EAAW,IAAI2B,EACnB,GAAIY,EAAMA,iBAAiBC,WAEvBtB,QAAQqB,MAAM,qCAAsCA,EAAMA,MAAME,SAChEzC,EAASiC,KAAOC,EAAQQ,YACxB1C,EAASyC,QAAUF,EAAMA,MAAME,YAC5B,CAAA,GAAIF,aAAiBZ,EACxB,OAAOgB,aAAWC,MAAML,GACrB,GAAIA,aAAiBtC,MACxBD,EAASiC,KAAOC,EAAQQ,YACxB1C,EAASyC,QAAUF,EAAME,aACtB,GAAIF,EAAMA,iBAAiBM,cAC9B7C,EAASiC,KAAOC,EAAQY,SACxB9C,EAAS+C,MAAQR,EAAMA,UACpB,CAGH,IAAMS,EAAsB5C,KAAKD,OAAOuB,sBAAsBa,IAE1DvC,EADAgD,GAIWT,EAAMA,OAEZN,KAAOM,EAAMU,OAAOC,WAC7BhC,QAAQqB,MACJ,yCAAyCvC,EAASiC,oBACrCjC,EAASyC,UAE9B,OAAOE,aAAWC,MAAM5C,IAG5B4B,mBAAA,SAAOuB,GAAP,WACI,OAAO/C,KAAKyB,WAAWnB,IAAiBN,KAAK0B,KAAOqB,EAAW,IAAIA,EAAa,KAC3E7B,KAAKC,MAAI,SAAAS,GAAO,OAAAP,EAAK2B,YAAYpB,MACjCV,KAAK+B,aAAW,SAAAC,GAAO,OAAA7B,EAAK8B,YAAYD,OAGjD1B,gBAAA,SAAI4B,GAAJ,WACI,OAAOpD,KAAKyB,WAAWnB,IAAiBN,KAAK0B,KAAO0B,EAAK,IAAIA,EAAO,KAC/DlC,KAAKC,MAAI,SAAAS,GAAO,OAAAP,EAAK2B,YAAYpB,MACjCV,KAAK+B,aAAW,SAAAC,GAAO,OAAA7B,EAAK8B,YAAYD,OAIjD1B,iBAAA,SAAK6B,GAAL,WACI,OAAOrD,KAAKyB,WAAW6B,KAAkBtD,KAAK0B,IAAK2B,GAC9CnC,KAAKC,MAAI,SAAAS,GAAO,OAAAP,EAAK2B,YAAYpB,MACjCV,KAAK+B,aAAW,SAAAC,GAAO,OAAA7B,EAAK8B,YAAYD,OAGjD1B,mBAAA,SAAO+B,GAAP,WACI,OAAOvD,KAAKyB,WAAW6B,KAAkBtD,KAAK0B,IAAK6B,GAC9CrC,KAAKC,MAAI,SAAAS,GAAO,OAAAP,EAAK2B,YAAYpB,MACjCV,KAAK+B,aAAW,SAAAC,GAAO,OAAA7B,EAAK8B,YAAYD,OAGjD1B,mBAAA,SAAO4B,GAAP,WACI,OAAOpD,KAAKyB,WAAW+B,OAAoBxD,KAAK0B,KAAO0B,EAAK,IAAIA,EAAO,KAClElC,KAAKC,MAAI,SAAAS,GAAO,OAAAP,EAAK2B,YAAYpB,MACjCV,KAAK+B,aAAW,SAAAC,GAAO,OAAA7B,EAAK8B,YAAYD,8CClE5CO,UAAP,WACE,OACEC,SAAUD,EACVE,WACEjE,GACEkE,QAASC,oBAAmBC,SAAU7D,EAAoB8D,OAAO,0BAZ1EC,kBACCC,SACEC,eACAC"}