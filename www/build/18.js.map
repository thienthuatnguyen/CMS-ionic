{"version":3,"sources":["../../src/pages/settings/settings.module.ts","../../src/pages/settings/settings.ts"],"names":[],"mappings":"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","file":"18.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IonicPageModule } from 'ionic-angular';\n\nimport { SettingsPage } from './settings';\n\n@NgModule({\n  declarations: [\n    SettingsPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SettingsPage),\n    TranslateModule.forChild()\n  ],\n  exports: [\n    SettingsPage\n  ]\n})\nexport class SettingsPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/settings/settings.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IonicPage, NavController, NavParams, AlertController, ToastController, Platform } from 'ionic-angular';\n\nimport { SettingService } from '../../services/setting.service';\nimport { Setting } from '../../models/setting.model';\nimport { IvtSecurityService } from '@ivt/security';\nimport { Insomnia } from '@ionic-native/insomnia';\nimport { Config } from '../../app/app.config';\nimport { Autostart } from '@ionic-native/autostart';\n\n/**\n * The Settings page is a simple form that syncs with a Settings provider\n * to enable the user to customize settings for the app.\n *\n */\n@IonicPage()\n@Component({\n  selector: 'page-settings',\n  templateUrl: 'settings.html'\n})\nexport class SettingsPage {\n  // Our local settings object\n  options: any;\n  settingsReady = false;\n  page: string = 'main';\n  pageTitleKey: string = 'SETTINGS_TITLE';\n  pageTitle: string;\n  subSettings: any = SettingsPage;\n\n  settingItems: Array<any> = [\n    // hidden auto start button\n    // {\n    //   name: Config.setting.auto_start,\n    //   type: 'toggle',\n    //   platform: 'android',\n    //   value: true\n    // },\n    {\n      name: Config.setting.prevent_screen_from_sleeping,\n      type: 'toggle',\n      value: false\n    },\n    {\n      name: 'settings.change_profile_picture',\n      type: 'navigation',\n      page: 'ChangeProfilePage',\n      params: {\n        page: 'profilePicture',\n        pageTitleKey: 'SETTINGS_PAGE_PROFILE'\n      }\n    },\n    {\n      name: 'settings.change_password',\n      type: 'navigation',\n      page: 'ChangePasswordPage',\n      params: {\n        page: 'profile',\n        pageTitleKey: 'SETTINGS_PAGE_PROFILE'\n      }\n    },\n    {\n      name: 'settings.select_language',\n      type: 'navigation',\n      page: 'SelectLanguagePage'\n    }\n  ]\n\n  constructor(public navCtrl: NavController,\n    public settings: SettingService,\n    public formBuilder: FormBuilder,\n    public navParams: NavParams,\n    public translate: TranslateService,\n    private insomnia: Insomnia,\n    private platform: Platform,\n    private autostart: Autostart\n  ) {\n\n  }\n\n\n\n  ionViewWillLeave() {\n    this.save();\n  }\n\n  save() {\n    this.settings.clear();\n    this.settings.saveAll(this.settingItems.filter((_item) => _item.type === 'toggle').map(_item => {\n      const setting = new Setting();\n      setting.name = _item.name;\n      setting.value = _item.value;\n      return setting;\n    }))\n  }\n\n  ionViewWillEnter() {\n    this.page = this.navParams.get('page') || this.page;\n    this.pageTitleKey = this.navParams.get('pageTitleKey') || this.pageTitleKey;\n\n    this.translate.get(this.pageTitleKey).subscribe((res) => {\n      this.pageTitle = res;\n    })\n    this.settings.search().subscribe(_settings => {\n      this.settingItems.forEach(_item => {\n        const _mapedSetting = _settings.find(_setting => _setting.name === _item.name);\n        if (_mapedSetting) {\n          _item.value = _mapedSetting.value;\n        }\n      })\n    })\n  }\n\n  ngOnChanges() {\n    console.log('Ng All Changes');\n  }\n  cancel() {\n    this.navCtrl.pop();\n  }\n  async settingChanged(name: string, value: string) {\n    await this.platform.ready();\n    // this.save();\n    if (name === Config.setting.prevent_screen_from_sleeping) {\n      if (value.toString() == 'false') {\n        this.insomnia.allowSleepAgain().then(\n          () => console.log('success'),\n          (err) => console.log('error', err)\n        );\n      } else {\n        this.insomnia.keepAwake().then(\n          () => console.log('success'),\n          (err) => console.log('error', err)\n        );\n      }\n    }\n\n    if (name === Config.setting.auto_start) {\n      if (value.toString() == 'false') {\n        this.autostart.disable();\n      } else {\n        this.autostart.enable();\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/settings/settings.ts"],"sourceRoot":""}